pipeline {
  agent any
  
    environment {
        dotnet ="/usr/share/dotnet/dotnet"
    	projectKey = "CharlieBackend"
    	sonarUrl = "http://62.171.182.32:9000"
    	sonarLogin = "15373bb1f498a29ede21cacd687bb105dec45d1f"
    	sonarScanner = "/home/ec2-user/.dotnet/tools/dotnet-sonarscanner"
	
	CDD_APPLICATION_VERSION_NAME = "${env.GIT_BRANCH}"
	template_msg = "*Build* $JOB_NAME"
        AWS_ECR_REGION = "eu-central-1"
        AWS_ECS_TASK_DEFINITION = "what-backend-task"
        AWS_ECS_PANEL_TASK_DEFINITION = "what-backend-panel-task"
        AWS_ECS_EXECUTION_ROL = "what-backend-execution-task-role" 
        AWS_ECS_COMPATIBILITY = "FARGATE"
        AWS_ECS_NETWORK_MODE = "awsvpc"
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_TASK_DEFINITION_PATH = './jenkins/ecs/container-definition-update-image.json'
        AWS_ECS_PANEL_TASK_DEFINITION_PATH = './jenkins/ecs/container-definition-update-image-panel.json'
        AWS_ECS_CLUSTER = 'what-backend-release-cluster'
        AWS_ECS_PANEL_CLUSTER = 'what-backend-release-cluster-panel'
        AWS_ECS_SERVICE = 'what-backend-release-ecs-service'
        AWS_ECS_PANEL_SERVICE = 'what-backend-release-ecs-panel-service'
        AWS_ECR_URL = '934086672967.dkr.ecr.eu-central-1.amazonaws.com/what-backend-release-ecr'
        DB_USERNAME = 'DB_USERNAME'
        DB_PASSWORD = 'DB_PASSWORD'
        DATABASE = 'soft'
        APIURL = "http://api.whatdp.pp.ua/index.html"
        rdburl = ""
        rdbport = ""
    }

stages {
	stage ('Clean workspace') {
        	steps {
            		cleanWs()
        	}
    	}

    	stage ('Git Checkout') {
        	steps {
            		git branch: 'dev', url: 'https://github.com/ViktorMarhitich/WhatBackend.git'
        	}
    	}
  
    stage ('Fill database') {
        steps {
            sh(script:'''
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/1_generate_database.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/2_final_script_with_data.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/3_changing_logic_for_homeworks.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/4_update_data_for_homeworks.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/5_adding_history_of_homeworks.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/6_add_avatars.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/7_add_homework_attachments.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/8_add_students_homeworks.sql
            mysql -uadmin -h mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com -padmin123 Soft < /var/lib/jenkins/workspace/whatbackend_dev/scripts/9_add_IsActive_for_studentgroups.sql
            ''')
        }
    }
  
    stage ('Create .env files') {
        steps {
            sh '''
            cat <<EOF > /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Api/.env 
            ConnectionStrings__DefaultConnection=server=mysqlinstance.cwkbjhl45gxq.eu-central-1.rds.amazonaws.com;port=3306;UserId=admin;Password=admin123;database=soft;Allow User Variables=true
            ConnectionStrings__RabbitMQ=host=kangaroo.rmq.cloudamqp.com;virtualHost=cfhrvrrt;username=cfhrvrrt;password=yYvcHUcFxTsHGm51j4GtpA3mFguNv065 
            ConnectionStrings__AzureBlobsAccessKey=DefaultEndpointsProtocol=https;AccountName=csb10032000fbf86473;AccountKey=3Naz0PXXBe0Lie7HV51jdZsSFCqThDMsqGWdENueI/d2OoV14j6o9Hh0lY1TvAtM8g0VIuPQLDDmEruu951NZA==;EndpointSuffix=core.windows.net

            BotSettings__Url=https://963c-188-163-45-170.ngrok.io
            BotSettings__Key=1945675656:AAF5rVHswcwa8-xIZLS4DUlgFL2RW8mhrGM
            BotSettings__Name=whatnotification_bot

            # dev local token

            AuthOptions__KEY=mysupersecret_secretkey!123

            # email notifier account credential

            CredentialsSendersSettings__email=WhatITAcademy@gmail.com

            CredentialsSendersSettings__password=sseta2551fgya1235
            EOF'''
          
            sh '''
            cat <<EOF > /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Panel/.env 
            #_____________For Admin Panel_________________

            # do not commit this file to VCS

            # Naming rule: if the path to the secret is root/preRoot/secret, then you must write your secret value as root__preRoot__secret (2 underscores)


            # devlocalhost cookies key

            Cookies__SecureKey=MyVerySecretKey
            EOF'''
        } 
    }

    stage('Restore packages') {
        steps {
            sh(script: "${dotnet} restore /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.sln")
        } 
    }

    stage('Clean'){
        steps{
            
            sh(script: "${dotnet} clean /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Api/CharlieBackend.Api.csproj")
            sh(script: "${dotnet} clean /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Panel/CharlieBackend.Panel.csproj")
        }
    }

    stage('Build'){
        steps{
            
            sh(script: "${dotnet} build /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Api/CharlieBackend.Api.csproj --configuration Release")
            sh(script: "${dotnet} build /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Panel/CharlieBackend.Panel.csproj --configuration Release")
        }
    }

    stage('Test: Unit Test'){
        steps {
            
            sh(script: "${dotnet} test /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.Api.UnitTes/CharlieBackend.Api.UnitTest.csproj")
        }
    }
    
    stage('Code Quality Check via SonarQube') {
        steps {
            sh "sudo ${sonarScanner} begin /k:${projectKey} /d:sonar.host.url=${sonarUrl} /d:sonar.login=${sonarLogin}"
            sh "sudo ${dotnet} build /var/lib/jenkins/workspace/whatbackend_dev/CharlieBackend.sln"
            sh "sudo ${sonarScanner} end /d:sonar.login=${sonarLogin}"
        }
    }

		  
        stage("rdb") {
            steps {
                withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
                    script {
                        def rdbjson2 = sh(script: "/usr/bin/aws rds describe-db-instances \
                            --region eu-central-1 \
                            --db-instance-identifier mysqlinstance \
                            --query 'DBInstances[*].[DBInstanceIdentifier,Endpoint]'", returnStdout: true)
                        def jsonObj2 = readJSON text: rdbjson2
                        rdburl = sh(script: "echo ${jsonObj2[0][1].Address}", returnStdout: true).trim()
                        rdbport = sh(script: "echo ${jsonObj2[0][1].Port}", returnStdout: true).trim()
                        sh "echo rdb Address = ${rdburl}"
                        sh "echo rdb Port = ${rdbport}"
                    }
                }
            }
        }
        stage("docker build api and push to ecr") {
			steps {
                script {
                    sh 'docker image prune -a -f'
                    sh "cp ./jenkins/Dockerfile.api ./Dockerfile"
                    TAG = sh (
                        script: 'git log -1 --pretty=%h',
                        returnStdout: true
                    ).trim()
                    docker.withRegistry(
                        'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
                        'ecr:eu-central-1:aws_creds') {
                            def myImage = docker.build('what-backend-release-ecr')
                        myImage.push(TAG)
                    }
                }
            }
        }


        stage("docker build panel and push to ecr") {
			steps {
                script {
                    sh "ls"
                    sh 'docker image prune -a -f'
                    sh "cp ./jenkins/Dockerfile.panel ./Dockerfile"
                    sh "cp ./jenkins/entrypoint.sh ./entrypoint.sh"

                    TAG = sh (
                        script: 'git log -1 --pretty=%h',
                        returnStdout: true
                    ).trim()
                    docker.withRegistry(
                        'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
                        'ecr:eu-central-1:aws_creds') {
                            def myImage = docker.build('what-backend-release-panel-ecr')
                        myImage.push(TAG)
                    }
                }
            }
        }
//
        stage('Deploy api in ECS') {
            steps {
                withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
                    script {
                        def containerTag = sh(script: "/usr/local/bin/aws ecr describe-images --repository-name 'what-backend-release-ecr' --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text", returnStdout: true).trim()
                        // def containerTag = containerTag.trim()
                        sh "echo rdb Address"
                        sh "echo rdb Address = ${rdburl}"
                        sh "echo rdb Port"
                        sh "echo rdb Port = ${rdbport}"
                        sh "echo cont"
                        sh "sed -i 's/containerTag/${containerTag}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        sh "sed -i 's/rdburl/${rdburl}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        sh "sed -i 's/rdbport/${rdbport}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        sh "sed -i 's/DATABASE/${DATABASE}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        sh "sed -i 's/DB_PASSWORD/${DB_PASSWORD}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        sh "sed -i 's/DB_USERNAME/${DB_USERNAME}/' ${AWS_ECS_TASK_DEFINITION_PATH} "
                        
                        
                        sh '''
                            /usr/local/bin/aws ecs register-task-definition \
                                --region ${AWS_ECR_REGION} \
                                --family ${AWS_ECS_TASK_DEFINITION} \
                                --execution-role-arn ${AWS_ECS_EXECUTION_ROL} \
                                --requires-compatibilities ${AWS_ECS_COMPATIBILITY} \
                                --network-mode ${AWS_ECS_NETWORK_MODE} \
                                --cpu ${AWS_ECS_CPU} \
                                --memory ${AWS_ECS_MEMORY} \
                                --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH} 
                        '''
                        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
                        sh("/usr/local/bin/aws ecs update-service \
                            --cluster ${AWS_ECS_CLUSTER} \
                            --service ${AWS_ECS_SERVICE} \
                            --task-definition ${AWS_ECS_TASK_DEFINITION}")
                        // :${taskRevision}
                    }
                }
            }
        }
//
        stage('Deploy panel in ECS') {
            steps {
                withAWS(credentials: 'aws_creds', region: 'eu-central-1') {
                    script {
                        def containerTag = sh(script: "/usr/local/bin/aws ecr describe-images --repository-name 'what-backend-release-panel-ecr' --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text", returnStdout: true).trim()
                        // def containerTag = containerTag.trim()
                        sh "sed -i 's/containerTag/${containerTag}/' ${AWS_ECS_PANEL_TASK_DEFINITION_PATH} "
                        sh "sed -i 's|url_api|${APIURL}|' ${AWS_ECS_PANEL_TASK_DEFINITION_PATH} "
                        sh '''
                            /usr/local/bin/aws ecs register-task-definition \
                                --region ${AWS_ECR_REGION} \
                                --family ${AWS_ECS_PANEL_TASK_DEFINITION} \
                                --execution-role-arn ${AWS_ECS_EXECUTION_ROL} \
                                --requires-compatibilities ${AWS_ECS_COMPATIBILITY} \
                                --network-mode ${AWS_ECS_NETWORK_MODE} \
                                --cpu ${AWS_ECS_CPU} \
                                --memory ${AWS_ECS_MEMORY} \
                                --container-definitions file://${AWS_ECS_PANEL_TASK_DEFINITION_PATH} 
                        '''
                        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
                        sh("/usr/local/bin/aws ecs update-service \
                            --cluster ${AWS_ECS_PANEL_CLUSTER} \
                            --service ${AWS_ECS_PANEL_SERVICE} \
                            --task-definition ${AWS_ECS_PANEL_TASK_DEFINITION}")
                        // :${taskRevision}
                    }
                }
            }
        }
//
    }
}
//                             --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}
// def taskRevision2 = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\"" )
//#sed 's/containerTag/${containerTag}' ${AWS_ECS_TASK_DEFINITION_PATH} 
